"""Алгоритмы по заданиям из "Python - это просто"."""

# ##### 1. Напишите алгоритм для расчета простых процентов от некоторой суммы.
#
# Шаг 1. Начало.
# Шаг 2. Возьмем сумму и сохрани ее в переменную sum.
# Шаг 3. Возьмем проценты и сохраним их переменную percentages.
# Шаг 4. Умножаем sum на percentages и делим на 100.
# Шаг 5. Результат сохраняем в переменную result.
# Шаг 6. Выводим переменную result.
# Шаг 7. Конец.
#

# ##### 2. Напишите алгоритм для вычисления площади прямоугольника.
#
# Шаг 1. Начало.
# Шаг 2. Возьмем длину прямоугольника и сохраним ее в переменную length.
# Шаг 3. Возьмем ширину прямоугольника и сохраним ее в переменную width.
# Шаг 4. Умножаем length на width и сохраняем результат в переменную area.
# Шаг 5. Выводим переменную area.
# Шаг 6. Конец.
#

# ##### 3. Напишите алгоритм вычисления периметра круга.
#
# Шаг 1. Начало.
# Шаг 2. Возьмем радиус круга и сохраним в переменную radius.
# Шаг 3. Умножаем radius на 2 и умножаем на 3.14.
# Шаг 4. Результат сохраняем в переменную perimeter.
# Шаг 5. Выводим переменную perimeter.
# Шаг 6. Конец.

# ##### 4. Напишите алгоритм, который находит все простые числа меньше 100.
#
# Шаг 1. Начало.
# Шаг 2. Создадим список чисел от 2 до 100 и сохраним в переменную array.
# Шаг 3. Возьмем первое число из списка.
# Шаг 4. Удалим из списка все числа, кратные текущему числу.
# Шаг 5. Возьмем следующее число из списка.
# Шаг 6. Повторяем шаги 4 и 5 до тех, пока не дойдем до конца списка.
# Шаг 7. Выводим переменную array.
# Шаг 8. Конец.

# #####  5. Напишите алгоритм превращения предложения, написанного в верхнем регистре, в обычный для предложений регистр.
#
# Шаг 1. Начало.
# Шаг 2. Сохраним входное предложение в переменную sentence.
# Шаг 3. Сохраним значение 0 в переменную index.
# Шаг 4. Увеличиваем значение index на 1.
# Шаг 5. Проверяем, выполняется ли условие index < длины sentence. Если да, переходим к шагу 6. Если нет, переходим к шагу 9.
# Шаг 6. Проверяем, является ли символ по индексу index в строке sentence буквой. Если да, переходим к шагу 7. Если нет, переходим к шагу 4.
# Шаг 7. В строке sentence по индексу index заменяем букву аналогичной буквой из нижнего регистра.
# Шаг 8. Переходим к шагу 4.
# Шаг 9. Выводим переменную sentence.
# Шаг 10. Конец.

# #####  6. Составьте блок-схему приготовления льда из кипяченой воды с помощью холодильника.
#
# Шаг 1. Начало.
# Шаг 2. Возьмем чайник.
# Шаг 3. Нальем в чайник 500 мл воды.
# Шаг 4. Закипятим воду в чайнике.
# Шаг 5. Остудим воду до комнатной температуры.
# Шаг 6. Нальем воду в форму для льда.
# Шаг 7. Поместим форму для льда с водой в морозильную камеру на 3-6 часов до полного замерзания.
# Шаг 8. Конец.

# #####  7. Составьте блок-схему для нахождения суммы всех четных чисел меньше ста.
#
# Шаг 1. Начало.
# Шаг 2. Создадим переменную sum со значением 0.
# Шаг 3. Создадим переменную index со значением 0.
# Шаг 4. Проверим, выполняется ли условие: остаток от деления i на 2 равен нулю. Если да, переходим к шагу 5. Если нет, переходим к шагу 6.
# Шаг 5. Увеличиваем значение sum на index.
# Шаг 6. Увеличиваем значение index на 1.
# Шаг 7. Проверяем, выполняется ли условие index < 100. Если да, переходим к шагу 4. Если нет, переходим к шагу 7.
# Шаг 8. Выводим переменную sum.
# Шаг 9. Конец.

# #####  8. Составьте блок-схему для вычисления квадрата всех нечетных чисел от 1 до 15
# включительно.
#
# Шаг 1. Начало.
# Шаг 2. Создадим переменную index со значением 0.
# Шаг 3. Создадим неинициализированную переменную square.
# Шаг 4. Проверяем, выполняется ли условие: остаток от деления i на 2 равен единице. Если да, переходим к шагу 5. Если нет, переходим к шагу 7.
# Шаг 5. Сохраним в переменную square значение i*i.
# Шаг 6. Выводим переменную square.
# Шаг 7. Увеличиваем значение index на 1.
# Шаг 8. Проверяем, выполняется ли условие i <= 15. Если да, переходим к шагу 4. Если нет, переходим к шагу 9.
# Шаг 9. Конец.

# ##### 9. Составьте блок-схему вывода таблицы умножения на 3.
#
# Шаг 1. Начало.
# Шаг 2. Создадим переменную x со значением 0.
# Шаг 3. Создадим переменную n со значением 3.
# Шаг 4. Создадим неинициализированную переменную product.
# Шаг 5. Умножаем x на n.
# Шаг 6. Сохраняем результат в переменную product.
# Шаг 7. Выводим строку x * n = product.
# Шаг 8. Увеличиваем значение x на 1.
# Шаг 9. Проверяем, выполняется ли условие x <= 10. Если да, переходим к шагу 5. Если нет, переходим к шагу 10.
# Шаг 10. Конец.

# ##### 10. Составьте блок-схему для расчета сложных процентов (с капитализацией).
# Расчет сложных процентов с ежемесячной капитализацией.
#
# Шаг 1. Начало.
# Шаг 2. Введем начальную сумму вклада и сохраним ее в переменную deposit.
# Шаг 3. Введем годовую процентную ставку в процентах и сохраним ее в переменную percents.
# Шаг 4. Введем количество раз начисления процентов в год и сохраним результат ввода в переменную compounding_frequency.
# Шаг 5. Введем количество месяцев вклада и сохраним в переменную months.
# Шаг 6. Создадим неинициализированную переменную temp_result.
# Шаг 7. Создадим неинициализированную переменную power.
# Шаг 8. Создадим неинициализированную переменную result.
# Шаг 9. Создадим неинициализированную переменную temp_result для хранения промежуточных результатов.
# Шаг 10. Разделим переменную percents на 100 и сохраним результат в переменную temp_result.
# Шаг 11. Разделим значение из temp_result на compounding_frequency и сохраним результат в переменную temp_result.
# Шаг 12. К значению из temp_result прибавим 1 и сохраним результат в переменную temp_result.
# Шаг 13. Значение из переменной months делим на 12 и умножаем на значение из переменной compounding_frequency.
# Шаг 14. Сохраняем результат в переменную power.
# Шаг 15. Возводим значение из temp_result в степень power и сохраним результат в переменную temp_result.
# Шаг 16. Умножаем значение из переменной deposit на значение из переменной temp_result и сохраняем результат в переменную result.
# Шаг 17. Выводим переменную result.
# Шаг 18. Конец.
