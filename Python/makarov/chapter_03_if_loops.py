"""Макаров.

Условия и циклы.
"""

# ## Условия и циклы. Продолжение
#

# ### Еще раз про условия с if
#

# Множественные условия (multi-way decisions)
#

# +
# напишем программу, которая разобьет все числа на малые, средние и большие
# импортируем библиотеку numpy
import numpy as np

x_1 = 42  # зададим число

# и пропишем условия (не забывайте про двоеточие и отступ)
if x_1 < 10:
    print("Small")
elif x_1 < 100:
    print("Medium")
else:
    print("Large")

# +
# запросим число у пользователя
x_str = input("Введите число: ")

# преобразуем в тип int
x_2 = int(x_str)

# и наконец классифицируем
if x_2 < 10:
    print("Small")
elif x_2 < 100:
    print("Medium")
else:
    print("Large")
# -

# Вложенные условия (nested decisions)
#

# +
# запрашиваем число
y_str = input("Введите число: ")

# проверяем первое условие (не пустая ли строка), если оно выполняется
if len(y_str) != 0:

    # преобразуем в тип int
    y_int = int(y_str)

    # и классифицируем
    if y_int < 10:
        print("Small")
    elif y_int < 100:
        print("Medium")
    else:
        print("Large")

# в противном, говорим, что ввод пустой
else:
    print("Ввод пустой")
# -

# Несколько условий в одном выражении с операторами and или or
#

# +
# пример с and (логическим И)
z_int = 42

# если z больше 10 и одновременно меньше 100
if 10 < z_int < 100:

    # у нас среднее число
    print("Medium")

# в противном случае оно либо маленькое либо большое
else:
    print("Small or Large")

# +
# пример с or (логическим ИЛИ)
z_int = 2

# если z меньше 10 или больше 100
if z_int < 10 or z_int > 100:

    # оно либо маленькое либо большое
    print("Small or Large")

# в противном случае оно среднее
else:
    print("Medium")
# -

# Проверка вхождения элемента в объект с in / not in
#

# +
# можно проверить вхождение слова в строку
sentence = "To be, or not to be, that is the question"
word = "question"

if word in sentence:
    print("Слово найдено")

# +
# или отсутствие элемента в списке
number_list = [2, 3, 4, 6, 7]
number = 5

if number not in number_list:
    print("Такого числа в списке нет")

# +
# кроме того, можно проверить вхождение ключа и значения в словарь

# возьмем очень простой словарь
d_dict = {"apple": 3, "tomato": 6, "carrot": 2}
# -

# вначале поищем яблоки среди ключей словаря
if "apple" in d_dict:
    print("Нашлись")

# а затем посмотрим, нет ли числа 6 среди его значений
# с помощью метода .values()
if 6 in d_dict.values():
    print("Есть")

# ### Циклы в Питоне
#

# #### Цикл for
#

# ##### Основные операции
#

# +
# поочередно выведем элементы списка
number_list = [1, 2, 3]

# не забывая про двоеточие и отступ
for number in number_list:
    print(number)
# -

# создадим словарь, значениями которого будут списки из двух элементов
fruits_dict = {"apple": [3, "kg"], "tomato": [6, "pcs"], "carrot": [2, "kg"]}

# затем создадим две переменные-контейнера и применим метод .items()
for key, value in fruits_dict.items():
    print(key, value)

# возьмем только одну переменную и применим метод .values()
for value in fruits_dict.values():
    # значение представляет собой список, выведем его первый элемент с индексом [0]
    print(value[0])

# +
# создадим массив и поместим в переменную number_array
number_array = np.array([1, 2, 3])

# пройдемся по нему с помощью цикла for
for number in number_array:
    print(number)
# -

# предположим, что у нас есть следующая база данных клиентов
clients_2: dict[int, dict[str, int | str]] = {
    1: {"name": "Анна", "age": 24, "sex": "male", "revenue": 12000},
    2: {"name": "Илья", "age": 18, "sex": "female", "revenue": 8000},
}

# в первом цикле for поместим id и информацию о клиентах в переменные id и info
for client_id, info in clients_2.items():

    # выведем id клиента
    print("client ID: " + str(client_id))

    # во втором цикле возьмем информацию об этом клиенте (это тоже словарь)
    for client_key, client_value in info.items():

        # и выведем каждый ключ (название поля) и значение (саму информацию)
        print(client_key + ": " + str(client_value))

    # добавим пустую строку после того, как выведем информацию об одном клиенте
    print()

# ##### Функция range()
#

# создадим последовательность от 0 до 4
for index in range(5):
    print(index)

# от 1 до 5
for index in range(1, 6):
    print(index)

# и от 0 до 5 с шагом 2 (то есть будем выводить числа через одно)
for index in range(0, 6, 2):
    print(index)

# +
# возьмем месяцы года
months = [
    "Январь",
    "Февраль",
    "Март",
    "Апрель",
    "Май",
    "Июнь",
    "Июль",
    "Август",
    "Сентябрь",
    "Октябрь",
    "Ноябрь",
    "Декабрь",
]

# и продажи мороженого в тыс. рублей в каждый из месяцев
sales = [47, 75, 79, 94, 123, 209, 233, 214, 197, 130, 87, 55]

length = len(months)
# задав последовательность через range(len()),
for index in range(length):
    # мы можем вывести каждый из элементов обоих списков в одном цикле
    print(months[index], sales[index])
# -

# Последовательность в обратном порядке
#

# **Способ 1**. Функция reversed()
#

# +
# создадим список
my_list = [0, 1, 2, 3, 4]

# передадим его функции reversed() и
# выведем каждый из элементов списка с помощью цикла for
for index in reversed(my_list):
    print(index)
# -

for index in reversed(range(5)):
    print(index)

# **Способ 2**. Указать $-1$ в качестве параметра шага
#

# первым параметром укажем конечный элемент списка,
# а вторым - начальный
for index in range(4, 0, -1):
    print(index)

# чтобы вывести 0, вторым параметром нужно указать -1
for index in range(4, -1, -1):
    print(index)

# **Способ 3**. Функция sorted()
#

# +
# создадим последовательность от 0 до 4
my_range = range(5)

# отсортируем ее по убыванию
sorted_values = sorted(my_range, reverse=True)

# выведем элементы отсортированной последовательности
for index in sorted_values:
    print(index)
# -

# ##### Функция enumerate()
#

# +
# пусть дан список с днями недели
days = [
    "Понедельник",
    "Вторник",
    "Среда",
    "Четверг",
    "Пятница",
    "Суббота",
    "Воскресенье",
]

# выведем индекс (index) и сами элементы списка (day)
for index, day in enumerate(days):
    print(index, day)
# -

# так же выведем индекс и элементы списка, но начнем с 1
for index, day in enumerate(days, 1):
    print(index, day)

# #### Цикл while
#

# +
# зададим начальное значение счетчика
index = 0

# пока счетчик меньше трех
while index < 3:

    # в каждом цикле будем выводить его текущее значение
    print("Текущее значение счетчика:  " + str(index))

    # внутри цикла не забудем "нарастить" счетчик
    index = index + 1

    # и выведем новое значение
    print("Новое значение счетчика:    " + str(index))

    # добавим пустую строку
    print()

# +
# тот же код можно упростить
index = 0

while index < 3:
    print(index)
    # в частности, оператор += сразу увеличивает и присваивает новое значение
    index += 1
# -

# #### Break, continue
#

# Оператор break
#

# +
# вновь возьмем словарь clients
clients_1: dict[int, dict[str, int | str]] = {
    1: {"name": "Анна", "age": 24, "sex": "male", "revenue": 12000},
    2: {"name": "Илья", "age": 18, "sex": "female", "revenue": 8000},
}

# в цикле пройдемся по ключам и значениям словаря
for client_id, info in clients_1.items():

    # и выведем их
    print(client_id, info)

    # однако уже после первого исполнения цикла, прервем его
    break

# +
# начальное значение счетчика
x_int = 6

# будем исполнять цикл пока x не равен нулю
while x_int != 0:

    # выведем текущее значение счетчика
    print(x_int)

    # и уменьшим (!) его на 1
    x_int -= 1

    # если значение счетчика станет равным 3, прервем цикл
    if x_int == 3:
        break
# -

# Оператор continue
#

# +
# выведем все четные числа в диапазоне от 1 до 10 включительно.

# с помощью функции range() создадим последовательность от 1 до 10
for index in range(1, 11):

    # если остаток от деления на два не равен нулю (то есть число нечетное)
    if index % 2 != 0:

        # идем к следующему числу последовательности
        continue

    # в противном случае выводим число
    print(index)
# -

# #### Форматирование строк через f-строки и метод .format()
#

# +
# снова возьмем список с днями недели
days = [
    "Понедельник",
    "Вторник",
    "Среда",
    "Четверг",
    "Пятница",
    "Суббота",
    "Воскресенье",
]

# и для простоты поместим слово "Понедельник" в переменную Monday
Monday = days[0]
Monday
# -

# теперь напишем фразу "Понедельник - день тяжелый" следующим образом
print(f"{Monday} - день тяжелый")

# то же самое можно вывести с помощью метода .format()
print(f"{Monday} - день тяжелый")  # pylint: disable=C0209

# ### Ответы на вопросы к занятию
#

# **Вопрос**. Можно ли использовать цикл while с функцией range()?
#

# +
# с функцией range() можно использовать цикл while, но такое решение не оптимально
# приведем пример с while

index = 1  # создадим счетчик

while index in range(1, 11):  # пока счетчик в диапазоне от 1 до 10
    print("Значение счетчика ", index)  # выведем его значение и
    index += 1  # увеличим счетчик на 1
# -

# более оптимальный код
for index in range(1, 11):
    print("Значение счетчика ", index)

# **Вопрос**. Можно ли обойтись без оператора continue в приведенном на занятии примере?
#

for index in range(1, 11):
    # если число четное, выведем его
    if index % 2 == 0:
        print(index)
